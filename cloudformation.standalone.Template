{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "",
	"Parameters": {
		"InstanceKeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern": "[-_ a-zA-Z0-9]*",
			"ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
		},

		"CookbooksRepo": {
			"Description": "The github url for your custom cookbooks",
			"Type": "String"
		},
		"CookbooksRef": {
			"Description": "The git reference to checkout for custom cookbooks",
			"Type": "String",
			"Default": "master"
		},
		"CookbooksSshKey": {
			"Description": "The ssh key needed to clone the cookbooks repo",
			"Type": "String",
			"NoEcho": "true",
			"Default": ""
		},
		"Version": {
			"Description": "Just a place holder for version",
			"Type": "String",
			"Default": "0.1"
		},
		"RabbitMQCertificateARN": {
			"Description": "ARN of the certificate to use for rabbitmq",
			"Type": "String"
		},
		"GithubOauthAppId": {
			"Description": "Github Oauth App Id to use for doorman authentication. Leave empty for none.",
			"Type": "String",
			"Default": ""
		},
		"GithubOauthSecret": {
			"Description": "Github Oauth App Secret to use for doorman authentication. Leave empty for none.",
			"Type": "String",
			"NoEcho": "true",
			"Default": ""
		},
		"GithubOauthOrganization": {
			"Description": "Github Organization to allow through doorman",
			"Type": "String",
			"Default": ""
		},
		"DoormanEnable": {
			"Description": "Protect all internal resources through Doorman? If you are not deploying this privately through a VPN, this is recommended",
			"Type": "String",
			"Default": "true",
			"AllowedValues": [ "true", "false" ]
		},
		"DoormanSessionSecret": {
			"Description": "A Secret Salt used to encrypt cookies for doorman",
			"Type": "String",
			"NoEcho": "true",
			"Default": ""
		},
		"DoormanPassword": {
			"Description": "Password to use for alternate authentication through doorman. Leave empty for none",
			"Type": "String",
			"Default": ""
		},
		"OpsWorksStackColor": {
			"Description": "RGB Color to use for OpsWorks Stack",
			"Type": "String",
			"Default": "rgb(45, 114, 184)"
		},
		"BastionInstanceType": {
			"Type": "String",
			"Default": "m3.medium",
			"AllowedValues": [ "m3.medium" ],
			"Description": "Default is m3.medium."
		},
		"RabbitMQInstanceType": {
			"Type": "String",
			"Default": "r3.large",
			"AllowedValues": [ "m3.large", "c3.large", "r3.large" ],
			"Description": "Enter m3.large, c3.large, or r3.large. Default is r3.large."
		},
		"GraphiteInstanceType": {
			"Type": "String",
			"Default": "c3.large",
			"AllowedValues": [ "m3.medium", "m3.large", "c3.large", "r3.large" ],
			"Description": "Enter m3.medium, m3.large, c3.large, or r3.large. Default is c3.large."
		},
		"ElasticSearchInstanceType": {
			"Type": "String",
			"Default": "r3.large",
			"AllowedValues": [ "m3.medium", "m3.large", "c3.large", "r3.large" ],
			"Description": "Enter m3.medium, m3.large, c3.large, or r3.large. Default is r3.large."
		},
		"LogstashInstanceType": {
			"Type": "String",
			"Default": "c3.large",
			"AllowedValues": [ "m3.medium", "m3.large", "c3.large", "r3.large" ],
			"Description": "Enter m3.medium, m3.large, c3.large, or r3.large. Default is c3.large."
		},
		"DashboardInstanceType": {
			"Type": "String",
			"Default": "c3.large",
			"AllowedValues": [ "m3.medium", "m3.large", "c3.large", "r3.large", "m3.2xlarge" ],
			"Description": "Enter m3.medium, m3.large, c3.large, or r3.large. Default is c3.large."
		},
		"RabbitMQUser": {
			"Description": "RabbitMQ User",
			"Type": "String",
			"Default": "logger"
		},
		"RabbitMQErlangCookie": {
			"Description": "RabbitMQ Erlang Cookie. This should be unique per stack",
			"Type": "String",
			"NoEcho": "true"
		},
		"RabbitMQPassword": {
			"Description": "RabbitMQ Password",
			"Type": "String",
			"Default": "hunter2"
		},
		"RabbitMQLogstashInternalUser": {
			"Description": "RabbitMQ User",
			"Type": "String",
			"Default": "logstash_internal"
		},
		"RabbitMQLogstashInternalPassword": {
			"Description": "RabbitMQ Password",
			"Type": "String"
		},
		"RabbitMQLogstashExternalUser": {
			"Description": "RabbitMQ User",
			"Type": "String",
			"Default": "logstash_external"
		},
		"RabbitMQLogstashExternalPassword": {
			"Description": "RabbitMQ Password",
			"Type": "String"
		},
		"RabbitMQSensuPassword": {
			"Description": "RabbitMQ Sensu Password",
			"Type": "String"
		},
		"RabbitMQStatsdPassword": {
			"Description": "RabbitMQ Statsd Password",
			"Type": "String"
		},
		"GraphiteVolumeSize": {
			"Description": "Size of disk in GB to use for graphite ebs volumes",
			"Type": "Number",
			"MinValue": 20,
			"Default": 100
		},
		"ElasticSearchVolumeSize": {
			"Description": "Size of disk in GB to use for elasticsearch ebs volumes",
			"Type": "Number",
			"MinValue": 20,
			"Default": 1000
		},
		"RabbitMQVolumeSize": {
			"Description": "Size of disk in GB to use for elasticsearch ebs volumes",
			"Type": "Number",
			"MinValue": 20,
			"Default": 20
		},
		"Route53ZoneId": {
			"Description": "The zone id to add dns records to on instance setup. If empty updates won't happen",
			"Type": "String",
			"Default": ""
		},
		"Route53DomainName": {
			"Description": "The domain name to append to dns records",
			"Type": "String",
			"Default": ""
		},
		"PagerDutyAPIKey": {
			"Description": "The pagerduty api key if you want sensu alerts forwarded to pagerduty",
			"Type": "String",
			"Default": ""
		},
		"RedisNodeType": {
			"Default": "cache.m1.small",
			"Description": "The compute and memory capacity of the nodes in the Redis Cluster",
			"Type": "String",
			"AllowedValues": [ "cache.m1.small", "cache.m1.large", "cache.m1.xlarge", "cache.m2.xlarge", "cache.m2.2xlarge", "cache.m2.4xlarge", "cache.c1.xlarge" ],
			"ConstraintDescription": "must select a valid Cache Node type."
		}
	},
	"Mappings": {
		"AWSNATAMI": {
			"us-east-1": {
				"AMI": "ami-c6699baf"
			},
			"us-west-2": {
				"AMI": "ami-52ff7262"
			},
			"us-west-1": {
				"AMI": "ami-3bcc9e7e"
			},
			"eu-west-1": {
				"AMI": "ami-0b5b6c7f"
			},
			"ap-southeast-1": {
				"AMI": "ami-02eb9350"
			},
			"ap-northeast-1": {
				"AMI": "ami-14d86d15"
			},
			"sa-east-1": {
				"AMI": "ami-0439e619"
			}
		},
		"SubnetConfig": {
			"VPC": {
				"CIDR": "10.133.0.0/16"
			},
			"Public": {
				"CIDR": "10.133.0.0/24"
			},
			"Private0": {
				"CIDR": "10.133.1.0/24"
			},
			"Private1": {
				"CIDR": "10.133.2.0/24"
			},
			"Private2": {
				"CIDR": "10.133.3.0/24"
			},
			"Private3": {
				"CIDR": "10.133.4.0/24"
			}
		}
	},
	"Resources": {
		"OpsWorksStack": {
			"Type": "AWS::OpsWorks::Stack",
			"Properties": {
				"Name": {
					"Ref": "AWS::StackName"
				},
				"ConfigurationManager": {
					"Name": "Chef",
					"Version": "11.10"
				},
				"ChefConfiguration": {
					"BerkshelfVersion": "3.1.3",
					"ManageBerkshelf": true
				},
				"DefaultOs": "Ubuntu 14.04 LTS",
				"UseCustomCookbooks": true,
				"CustomCookbooksSource": {
					"Revision": {
						"Ref": "CookbooksRef"
					},
					"SshKey": {
						"Ref": "CookbooksSshKey"
					},
					"Type": "git",
					"Url": {
						"Ref": "CookbooksRepo"
					}
				},
				"Attributes": {
					"Color": {
						"Ref": "OpsWorksStackColor"
					}
				},
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"OpsWorksServiceRole",
						"Arn"
					]
				},
				"DefaultInstanceProfileArn": {
					"Fn::GetAtt": [
						"OpsWorksInstanceProfile",
						"Arn"
					]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"DefaultSubnetId": {
					"Ref": "PrivateSubnet0"
				},
				"CustomJson": {
					"chef_environment": "production",
					"route53": {
						"zone_id": {
							"Ref": "Route53ZoneId"
						},
						"domain_name": {
							"Ref": "Route53DomainName"
						}
					},
					"aws_region": {
						"Ref": "AWS::Region"
					},
					"graphite": {
						"host": {
							"Fn::GetAtt": [
								"GraphiteELB",
								"DNSName"
							]
						}
					},
					"elasticsearch": {
						"version": "1.6.0",
						"cluster": {
							"name": "logstash"
						},
						"plugins": {
							"elasticsearch/elasticsearch-cloud-aws": {
								"version": "2.6.0"
							}
						},
						"cloud": {
							"aws": {
								"region": {
									"Ref": "AWS::Region"
								}
							}
						},
						"discovery": {
							"type": "ec2",
							"ec2": {
								"groups": { "Ref": "ElasticSearchSecurityGroup" }
							}
						},
						"http_auth": false,
						"index.number_of_shards": 8,
						"index.number_of_replicas": 2,
						"index.auto_expand_replicas": "2-all"
					},
					"bb_monitor": {
						"sensu": {
							"server_url": {
								"Fn::GetAtt": [
									"DashboardELB",
									"DNSName"
								]
							},
							"redis_cluster_id": {
								"Ref": "RedisCluster"
							},
							"rabbitmq": {
								"server": {
									"Fn::GetAtt": [
										"RabbitMQELB",
										"DNSName"
									]
								},
								"password": {
									"Ref": "RabbitMQSensuPassword"
								}
							},
							"pagerduty_api": {
								"Ref": "PagerDutyAPIKey"
							}
						},
						"logstash": {
							"rabbitmq": {
								"server": {
									"Fn::GetAtt": [
										"RabbitMQELB",
										"DNSName"
									]
								},
								"password": {
									"Ref": "RabbitMQLogstashInternalPassword"
								}
							},
							"server": {
								"elasticsearch_server": {
									"Fn::GetAtt": [
										"ElasticSearchELB",
										"DNSName"
									]
								},
								"filters": [ ],
								"statsd_output": { }
							}
						}
					},
					"rabbitmq": {
						"cluster": true,
						"erlang_cookie": {
							"Ref": "RabbitMQErlangCookie"
						}
					},
					"rabbitmq_cluster": {
						"users": [
							{
								"user": {
									"Ref": "RabbitMQUser"
								},
								"password": {
									"Ref": "RabbitMQPassword"
								}
							},
							{
								"user": {
									"Ref": "RabbitMQLogstashExternalUser"
								},
								"password": {
									"Ref": "RabbitMQLogstashExternalPassword"
								}
							},
							{
								"user": {
									"Ref": "RabbitMQLogstashInternalUser"
								},
								"password": {
									"Ref": "RabbitMQLogstashInternalPassword"
								}
							}
						]
					},
					"kibana": {
						"version": "3",
						"kibana3_version": "3.1.1",
						"elasticsearch_server": {
							"Fn::GetAtt": [
								"ElasticSearchELB",
								"DNSName"
							]
						}
					},
					"doorman": {
						"password": {
							"Ref": "DoormanPassword"
						},
						"session_secret": {
							"Ref": "DoormanSessionSecret"
						},
						"app_id": {
							"Ref": "GithubOauthAppId"
						},
						"app_secret": {
							"Ref": "GithubOauthSecret"
						},
						"org_name": {
							"Ref": "GithubOauthOrganization"
						},
						"password": {
							"Ref": "DoormanPassword"
						}
					},
					"statsd": {
						"graphite_host": {
							"Fn::GetAtt": [
								"GraphiteELB",
								"DNSName"
							]
						},
						"nodejs_bin": "/usr/local/bin/node",
						"rabbitmq": {
							"vhost": "/statsd",
							"user": "statsd",
							"password": {
								"Ref": "RabbitMQStatsdPassword"
							}
						}
					}
				}
			}
		},
		"OpsWorksBastionLayer": {
			"Type": "AWS::OpsWorks::Layer",
			"Metadata": {
				"Comment": "Put the bastion layer inside of opsworks so the same users that have access to opsworks will have access to bastion."
			},
			"DependsOn": [
				"NATIPAddress",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"PrivateRoute",
				"PrivateSubnet0RouteTableAssociation",
				"PrivateSubnet1RouteTableAssociation",
				"PrivateSubnet2RouteTableAssociation",
				"PrivateSubnet3RouteTableAssociation"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "Bastion",
				"Type": "custom",
				"Shortname": "bastion",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "true",
				"AutoAssignPublicIps": "false",
				"CustomSecurityGroupIds": [
					{
						"Ref": "OpsWorksSecurityGroup"
					},
					{
						"Ref": "InternalSecurityGroup"
					}
				],
				"CustomRecipes": {
					"Setup": [
						"bb_monitor::route53",
						"bb_monitor::logstash_agent"
					],
					"Configure": [
						"bb_monitor::sensu_client"
					],
					"Deploy": [ ],
					"Undeploy": [ ],
					"Shutdown": [ ]
				}
			}
		},
		"BastionInstance1": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [
					{
						"Ref": "OpsWorksBastionLayer"
					}
				],
				"InstanceType": { "Ref": "BastionInstanceType" },
				"SubnetId": { "Ref": "PublicSubnet" },
				"SshKeyName": { "Ref": "InstanceKeyName" }
			}
		},
		"OpsWorksDashboardLayer": {
			"Type": "AWS::OpsWorks::Layer",
			"Metadata": {
				"Comment": ""
			},
			"DependsOn": [
				"NATIPAddress",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"PrivateRoute",
				"PrivateSubnet0RouteTableAssociation",
				"PrivateSubnet1RouteTableAssociation",
				"PrivateSubnet2RouteTableAssociation",
				"PrivateSubnet3RouteTableAssociation",
				"RedisCluster"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "Dashboard",
				"Type": "custom",
				"Shortname": "dashboard",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "false",
				"CustomSecurityGroupIds": [
					{
						"Ref": "OpsWorksSecurityGroup"
					},
					{
						"Ref": "InternalSecurityGroup"
					}
				],
				"CustomRecipes": {
					"Setup": [
						"bb_monitor::kibana",
						"bb_monitor::grafana",
						"bb_monitor::sensu_server",
						"bb_monitor::flapjack",
						"bb_monitor::nginx",
						"bb_monitor::route53",
						"bb_monitor::logstash_agent"
					],
					"Configure": [
						"bb_monitor::sensu_client"
					],
					"Deploy": [ ],
					"Undeploy": [ ],
					"Shutdown": [ ]
				}
			}
		},
		"DashboardInstance1": {
			"Type": "AWS::OpsWorks::Instance",
			"DependsOn": [
				"RabbitMQInstance1",
				"GraphiteInstance1"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [
					{
						"Ref": "OpsWorksDashboardLayer"
					}
				],
				"InstanceType": { "Ref": "DashboardInstanceType" },
				"SshKeyName": { "Ref": "InstanceKeyName" }
			}
		},
		"OpsWorksGraphiteLayer": {
			"Type": "AWS::OpsWorks::Layer",
			"Metadata": {
				"Comment": ""
			},
			"DependsOn": [
				"NATIPAddress",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"PrivateRoute",
				"PrivateSubnet0RouteTableAssociation",
				"PrivateSubnet1RouteTableAssociation",
				"PrivateSubnet2RouteTableAssociation",
				"PrivateSubnet3RouteTableAssociation"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "Graphite",
				"Type": "custom",
				"Shortname": "graphite",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "false",
				"CustomSecurityGroupIds": [
					{
						"Ref": "OpsWorksSecurityGroup"
					},
					{
						"Ref": "InternalSecurityGroup"
					}
				],
				"CustomRecipes": {
					"Setup": [
						"bb_monitor::graphite",
						"bb_monitor::route53",
						"bb_monitor::logstash_agent"
					],
					"Configure": [
						"bb_monitor::sensu_client"
					],
					"Deploy": [ ],
					"Undeploy": [ ],
					"Shutdown": [
						"bb_monitor::sensu_client_remove"
					]
				},
				"VolumeConfigurations": [
					{
						"MountPoint": "/opt/graphite/storage",
						"NumberOfDisks": 1,
						"Size": {
							"Ref": "GraphiteVolumeSize"
						}
					}
				]
			}
		},
		"GraphiteInstance1": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [
					{
						"Ref": "OpsWorksGraphiteLayer"
					}
				],
				"InstanceType": { "Ref": "GraphiteInstanceType" },
				"SshKeyName": { "Ref": "InstanceKeyName" }
			}
		},
		"OpsWorksElasticSearchLayer": {
			"Type": "AWS::OpsWorks::Layer",
			"Metadata": {
				"Comment": ""
			},
			"DependsOn": [
				"NATIPAddress",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"PrivateRoute",
				"PrivateSubnet0RouteTableAssociation",
				"PrivateSubnet1RouteTableAssociation",
				"PrivateSubnet2RouteTableAssociation",
				"PrivateSubnet3RouteTableAssociation"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "ElasticSearch",
				"Type": "custom",
				"Shortname": "elasticsearch",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "false",
				"CustomSecurityGroupIds": [
					{
						"Ref": "OpsWorksSecurityGroup"
					},
					{
						"Ref": "InternalSecurityGroup"
					},
					{
						"Ref": "ElasticSearchSecurityGroup"
					}
				],
				"CustomRecipes": {
					"Setup": [
						"bb_elasticsearch",
						"bb_monitor::route53",
						"bb_monitor::logstash_agent"
					],
					"Configure": [
						"bb_monitor::sensu_client"
					],
					"Deploy": [ ],
					"Undeploy": [ ],
					"Shutdown": [
						"bb_monitor::sensu_client_remove"
					]
				},
				"VolumeConfigurations": [
					{
						"MountPoint": "/usr/local/var",
						"NumberOfDisks": 1,
						"Size": {
							"Ref": "ElasticSearchVolumeSize"
						}
					}
				]
			}
		},
		"ElasticSearchInstance1": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [
					{
						"Ref": "OpsWorksElasticSearchLayer"
					}
				],
				"InstanceType": { "Ref": "ElasticSearchInstanceType" },
				"SubnetId": { "Ref": "PrivateSubnet0" },
				"SshKeyName": { "Ref": "InstanceKeyName" }
			}
		},
		"ElasticSearchInstance2": {
			"Type": "AWS::OpsWorks::Instance",
			"DependsOn": [
				"ElasticSearchInstance1"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [
					{
						"Ref": "OpsWorksElasticSearchLayer"
					}
				],
				"InstanceType": { "Ref": "ElasticSearchInstanceType" },
				"SubnetId": { "Ref": "PrivateSubnet1" },
				"SshKeyName": { "Ref": "InstanceKeyName" }
			}
		},
		"ElasticSearchInstance3": {
			"Type": "AWS::OpsWorks::Instance",
			"DependsOn": [
				"ElasticSearchInstance1",
				"ElasticSearchInstance2" 
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [
					{
						"Ref": "OpsWorksElasticSearchLayer"
					}
				],
				"InstanceType": { "Ref": "ElasticSearchInstanceType" },
				"SubnetId": { "Ref": "PrivateSubnet2" },
				"SshKeyName": { "Ref": "InstanceKeyName" }
			}
		},
		"OpsWorksRabbitMQLayer": {
			"Type": "AWS::OpsWorks::Layer",
			"Metadata": {
				"Comment": ""
			},
			"DependsOn": [
				"NATIPAddress",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"PrivateRoute",
				"PrivateSubnet0RouteTableAssociation",
				"PrivateSubnet1RouteTableAssociation",
				"PrivateSubnet2RouteTableAssociation",
				"PrivateSubnet3RouteTableAssociation"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "RabbitMQ",
				"Type": "custom",
				"Shortname": "rabbitmq",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "false",
				"CustomSecurityGroupIds": [
					{
						"Ref": "OpsWorksSecurityGroup"
					},
					{
						"Ref": "InternalSecurityGroup"
					}
				],
				"CustomRecipes": {
					"Setup": [
						"rabbitmq_cluster",
						"bb_monitor::route53",
						"bb_monitor::logstash_agent"
					],
					"Configure": [
						"bb_monitor::sensu_client"
					],
					"Deploy": [ ],
					"Undeploy": [ ],
					"Shutdown": [
						"bb_monitor::sensu_client_remove"
					]
				},
				"VolumeConfigurations": [
					{
						"MountPoint": "/var/lib/rabbitmq",
						"NumberOfDisks": 1,
						"Size": {
							"Ref": "RabbitMQVolumeSize"
						}
					}
				]
			}
		},
		"RabbitMQInstance1": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [
					{
						"Ref": "OpsWorksRabbitMQLayer"
					}
				],
				"InstanceType": { "Ref": "RabbitMQInstanceType" },
				"SshKeyName": { "Ref": "InstanceKeyName" }
			}
		},
		"OpsWorksLogstashLayer": {
			"Type": "AWS::OpsWorks::Layer",
			"Metadata": {
				"Comment": ""
			},
			"DependsOn": [
				"NATIPAddress",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"PrivateRoute",
				"PrivateSubnet0RouteTableAssociation",
				"PrivateSubnet1RouteTableAssociation",
				"PrivateSubnet2RouteTableAssociation",
				"PrivateSubnet3RouteTableAssociation"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "Logstash",
				"Type": "custom",
				"Shortname": "logstash",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "false",
				"CustomSecurityGroupIds": [
					{
						"Ref": "OpsWorksSecurityGroup"
					},
					{
						"Ref": "InternalSecurityGroup"
					}
				],
				"CustomRecipes": {
					"Setup": [
						"bb_monitor::route53",
						"bb_monitor::logstash_server"
					],
					"Configure": [
						"bb_monitor::sensu_client"
					],
					"Deploy": [ ],
					"Undeploy": [ ],
					"Shutdown": [
						"bb_monitor::sensu_client_remove"
					]
				}
			}
		},
		"LogstashInstance1": {
			"Type": "AWS::OpsWorks::Instance",
			"DependsOn": [
				"ElasticSearchInstance1",
				"ElasticSearchInstance2",
				"ElasticSearchInstance3",
				"DashboardInstance1",
				"RabbitMQInstance1"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [
					{
						"Ref": "OpsWorksLogstashLayer"
					}
				],
				"InstanceType": { "Ref": "LogstashInstanceType" },
				"SshKeyName": { "Ref": "InstanceKeyName" }
			}
		},
		"OpsWorksServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"opsworks.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "opsworks-service",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ec2:*",
										"iam:PassRole",
										"cloudwatch:GetMetricStatistics",
										"elasticloadbalancing:*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"OpsWorksInstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "opsworks-instance-ec2",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ec2:CreateSnapshot",
										"ec2:CreateTags",
										"ec2:DeleteSnapshot",
										"ec2:Describe*"
									],
									"Resource": [
										"*"
									]
								}
							]
						}
					},
					{
						"PolicyName": "opsworks-opsworks",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"opsworks:*",
										"ec2:DescribeKeyPairs",
										"ec2:DescribeSecurityGroups",
										"ec2:DescribeAccountAttributes",
										"ec2:DescribeAvailabilityZones",
										"ec2:DescribeSecurityGroups",
										"ec2:DescribeSubnets",
										"ec2:DescribeVpcs",
										"elasticloadbalancing:DescribeInstanceHealth",
										"elasticloadbalancing:DescribeLoadBalancers",
										"iam:GetRolePolicy",
										"iam:ListInstanceProfiles",
										"iam:ListRoles",
										"iam:ListUsers",
										"iam:PassRole"
									],
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyName": "opsworks-route53",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"route53:*"
									],
									"Resource": [
										"*"
									]
								}
							]
						}
					},
					{
						"PolicyName": "opsworks-instance-cloudwatch",
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"autoscaling:Describe*",
										"cloudwatch:Describe*",
										"cloudwatch:Get*",
										"cloudwatch:List*",
										"logs:Get*",
										"logs:Describe*",
										"logs:TestMetricFilter",
										"sns:Get*",
										"sns:List*"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyName": "opsworks-instance-elb",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"elasticloadbalancing:DescribeInstanceHealth",
										"elasticloadbalancing:DescribeLoadBalancerAttributes",
										"elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
										"elasticloadbalancing:DescribeLoadBalancerPolicies",
										"elasticloadbalancing:DescribeLoadBalancers",
										"elasticloadbalancing:DescribeTags"
									],
									"Resource": [
										"*"
									]
								}
							]
						}
					},
					{
						"PolicyName": "opsworks-instance-elasticache",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "elasticache:DescribeCacheClusters",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"OpsWorksInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "OpsWorksInstanceRole"
					}
				]
			}
		},
		"OpsWorksSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow inbound requests from the ELB to the OpsWorks instances",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"SourceSecurityGroupId": {
							"Ref": "DashboardELBSecurityGroup"
						}
					}
				]
			}
		},
		"ElasticSearchSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allows ElasticSearch nodes to identify each other and communicate",
				"VpcId": {
					"Ref": "VPC"
				}
			}
		},
		"ElasticSearchSecurityGroupSelfIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Ref": "ElasticSearchSecurityGroup" },
				"IpProtocol": "tcp",
				"ToPort": "9300",
				"FromPort": "9300",
				"SourceSecurityGroupId": { "Ref": "ElasticSearchSecurityGroup" }
			},
			"DependsOn": "ElasticSearchSecurityGroup"
		},
		"DashboardELB": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"SecurityGroups": [
					{
						"Ref": "DashboardELBSecurityGroup"
					},
					{
						"Ref": "InternalSecurityGroup"
					}
				],
				"Subnets": [
					{
						"Ref": "PublicSubnet"
					}
				],
				"Listeners": [
					{
						"LoadBalancerPort": "80",
						"InstancePort": "80",
						"Protocol": "HTTP"
					},
					{
						"LoadBalancerPort": "6379",
						"InstancePort": "6379",
						"Protocol": "TCP"
					},
					{
						"LoadBalancerPort": "4567",
						"InstancePort": "4567",
						"Protocol": "TCP"
					}
				],
				"HealthCheck": {
					"Target": "HTTP:80/",
					"HealthyThreshold": "3",
					"UnhealthyThreshold": "5",
					"Interval": "90",
					"Timeout": "60"
				}
			}
		},
		"DashboardELBAttachment": {
			"Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
			"Properties": {
				"ElasticLoadBalancerName": {
					"Ref": "DashboardELB"
				},
				"LayerId": {
					"Ref": "OpsWorksDashboardLayer"
				}
			}
		},
		"DashboardELBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow inbound access to the ELB",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				],
				"SecurityGroupEgress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"RabbitMQELB": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"SecurityGroups": [
					{
						"Ref": "RabbitMQELBSecurityGroup"
					},
					{
						"Ref": "InternalSecurityGroup"
					}
				],
				"Subnets": [
					{
						"Ref": "PublicSubnet"
					}
				],
				"Listeners": [
					{
						"LoadBalancerPort": "5672",
						"InstancePort": "5672",
						"Protocol": "TCP"
					},
					{
						"LoadBalancerPort": "15672",
						"InstancePort": "15672",
						"Protocol": "TCP"
					},
					{
						"LoadBalancerPort": "5671",
						"InstancePort": "5671",
						"Protocol": "SSL",
						"SSLCertificateId": {
							"Ref": "RabbitMQCertificateARN"
						}
					}
				],
				"HealthCheck": {
					"Target": "TCP:5672",
					"HealthyThreshold": "3",
					"UnhealthyThreshold": "5",
					"Interval": "90",
					"Timeout": "60"
				}
			}
		},
		"RabbitMQELBAttachment": {
			"Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
			"Properties": {
				"ElasticLoadBalancerName": {
					"Ref": "RabbitMQELB"
				},
				"LayerId": {
					"Ref": "OpsWorksRabbitMQLayer"
				}
			}
		},
		"RabbitMQELBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow inbound access to the ELB",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "5671",
						"ToPort": "5671",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "5672",
						"ToPort": "5672",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "15672",
						"ToPort": "15672",
						"CidrIp": "0.0.0.0/0"
					}
				],
				"SecurityGroupEgress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "5671",
						"ToPort": "5671",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "5672",
						"ToPort": "5672",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "15672",
						"ToPort": "15672",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"ElasticSearchELB": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"SecurityGroups": [
					{
						"Ref": "InternalSecurityGroup"
					}
				],
				"Subnets": [
					{ "Ref": "PrivateSubnet0" },
					{ "Ref": "PrivateSubnet1" },
					{ "Ref": "PrivateSubnet2" },
					{ "Ref": "PrivateSubnet3" }
				],
				"Scheme": "internal",
				"Listeners": [
					{
						"LoadBalancerPort": "9200",
						"InstancePort": "9200",
						"Protocol": "TCP"
					},
					{
						"LoadBalancerPort": "9300",
						"InstancePort": "9300",
						"Protocol": "TCP"
					}
				],
				"HealthCheck": {
					"Target": "TCP:9200",
					"HealthyThreshold": "3",
					"UnhealthyThreshold": "5",
					"Interval": "90",
					"Timeout": "60"
				}
			}
		},
		"ElasticSearchELBAttachment": {
			"Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
			"Properties": {
				"ElasticLoadBalancerName": {
					"Ref": "ElasticSearchELB"
				},
				"LayerId": {
					"Ref": "OpsWorksElasticSearchLayer"
				}
			}
		},
		"GraphiteELB": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"SecurityGroups": [
					{
						"Ref": "InternalSecurityGroup"
					}
				],
				"Subnets": [
					{ "Ref": "PrivateSubnet0" },
					{ "Ref": "PrivateSubnet1" },
					{ "Ref": "PrivateSubnet2" },
					{ "Ref": "PrivateSubnet3" }
				],
				"Scheme": "internal",
				"Listeners": [
					{
						"LoadBalancerPort": "8081",
						"InstancePort": "8081",
						"Protocol": "TCP"
					},
					{
						"LoadBalancerPort": "2003",
						"InstancePort": "2003",
						"Protocol": "TCP"
					}
				],
				"HealthCheck": {
					"Target": "TCP:2003",
					"HealthyThreshold": "3",
					"UnhealthyThreshold": "5",
					"Interval": "90",
					"Timeout": "60"
				}
			}
		},
		"GraphiteELBAttachment": {
			"Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
			"Properties": {
				"ElasticLoadBalancerName": {
					"Ref": "GraphiteELB"
				},
				"LayerId": {
					"Ref": "OpsWorksGraphiteLayer"
				}
			}
		},
		"InternalSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow VPC access to ports running on dashboard server",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "-1",
						"FromPort": "-1",
						"ToPort": "-1",
						"CidrIp": {
							"Fn::FindInMap": [
								"SubnetConfig",
								"VPC",
								"CIDR"
							]
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "0",
						"ToPort": "65535",
						"SourceSecurityGroupId": {
							"Ref": "DashboardELBSecurityGroup"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "NATIPAddress"
									},
									"/32"
								]
							]
						}
					}
				],
				"SecurityGroupEgress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "-1",
						"FromPort": "-1",
						"ToPort": "-1",
						"CidrIp": {
							"Fn::FindInMap": [
								"SubnetConfig",
								"VPC",
								"CIDR"
							]
						}
					}
				]
			}
		},
		"InternalAccessSecurityGroupSelfIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Ref": "InternalSecurityGroup" },
				"IpProtocol": "-1",
				"ToPort": "-1",
				"FromPort": "-1",
				"SourceSecurityGroupId": { "Ref": "InternalSecurityGroup" }
			},
			"DependsOn": "InternalSecurityGroup"
		},
		"RedisCluster": {
			"Type": "AWS::ElastiCache::CacheCluster",
			"Properties": {
				"CacheNodeType": { "Ref": "RedisNodeType" },
				"VpcSecurityGroupIds": [ { "Fn::GetAtt": [ "RedisSecurityGroup", "GroupId" ] } ],
				"CacheSubnetGroupName": { "Ref": "RedisSubnetGroup" },
				"Engine": "redis",
				"NumCacheNodes": 1
			}
		},
		"RedisSubnetGroup": {
			"Type": "AWS::ElastiCache::SubnetGroup",
			"Properties": {
				"Description": "Subnet Group for redis",
				"SubnetIds": [ { "Ref": "PrivateSubnet0" }, { "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }, { "Ref": "PrivateSubnet3" } ]
			}
		},
		"RedisSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Lock redis down to Web Server access only",
				"VpcId": { "Ref": "VPC" }
			}
		},

		"RedisSecurityGroupIngressCluster": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"IpProtocol": "tcp",
				"FromPort": "6379",
				"ToPort": "6379",
				"GroupId": { "Fn::GetAtt": [ "RedisSecurityGroup", "GroupId" ] },
				"SourceSecurityGroupId": { "Fn::GetAtt": [ "RedisSecurityGroup", "GroupId" ] }
			}
		},
		"RedisSecurityGroupIngressStack": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"IpProtocol": "tcp",
				"FromPort": "6379",
				"ToPort": "6379",
				"GroupId": { "Fn::GetAtt": [ "RedisSecurityGroup", "GroupId" ] },
				"SourceSecurityGroupId": { "Fn::GetAtt": [ "OpsWorksSecurityGroup", "GroupId" ] }
			}
		},
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"DependsOn": "OpsWorksServiceRole",
			"Properties": {
				"CidrBlock": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"VPC",
						"CIDR"
					]
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Name",
						"Value": "opsviz"
					}
				]
			}
		},
		"PublicSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"CidrBlock": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"Public",
						"CIDR"
					]
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "VPCGatewayAttachment",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicSubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PublicNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"InboundHTTPPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "80",
					"To": "80"
				}
			}
		},
		"InboundHTTPSPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "101",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "443",
					"To": "443"
				}
			}
		},
		"InboundSSHPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "102",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "22",
					"To": "22"
				}
			}
		},
		"InboundEmphemeralPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "103",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},
		"OutboundPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		"PrivateSubnet0": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"CidrBlock": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"Private0",
						"CIDR"
					]
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Name",
						"Value": "opsviz-Private0"
					}
				]
			}
		},
		"PrivateSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						"1",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"CidrBlock": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"Private1",
						"CIDR"
					]
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Name",
						"Value": "opsviz-Private1"
					}
				]
			}
		},
		"PrivateSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						"2",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"CidrBlock": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"Private2",
						"CIDR"
					]
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Name",
						"Value": "opsviz-Private2"
					}
				]
			}
		},
		"PrivateSubnet3": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						"3",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"CidrBlock": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"Private3",
						"CIDR"
					]
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Name",
						"Value": "opsviz-Private3"
					}
				]
			}
		},
		"PrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "Private"
					}
				]
			}
		},
		"PrivateSubnet0RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet0"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"PrivateSubnet1RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"PrivateSubnet2RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"PrivateSubnet3RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet3"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"PrivateRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"InstanceId": {
					"Ref": "NATDevice"
				}
			}
		},
		"PrivateNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "Private"
					}
				]
			}
		},
		"InboundPrivateNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"OutBoundPrivateNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"PrivateSubnet0NetworkAclAssociation": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet0"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		},
		"PrivateSubnet1NetworkAclAssociation": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		},
		"PrivateSubnet2NetworkAclAssociation": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		},
		"PrivateSubnet3NetworkAclAssociation": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet3"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		},
		"NATIPAddress": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"InstanceId": {
					"Ref": "NATDevice"
				}
			}
		},
		"NATDevice": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"InstanceType": "m1.small",
				"SubnetId": {
					"Ref": "PublicSubnet"
				},
				"SourceDestCheck": "false",
				"ImageId": {
					"Fn::FindInMap": [
						"AWSNATAMI",
						{
							"Ref": "AWS::Region"
						},
						"AMI"
					]
				},
				"SecurityGroupIds": [
					{
						"Ref": "NATSecurityGroup"
					}
				]
			}
		},
		"NATSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow OpsWorks instances to access the NAT Device",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"SourceSecurityGroupId": {
							"Ref": "OpsWorksSecurityGroup"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "9418",
						"ToPort": "9418",
						"SourceSecurityGroupId": {
							"Ref": "OpsWorksSecurityGroup"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"SourceSecurityGroupId": {
							"Ref": "OpsWorksSecurityGroup"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Fn::FindInMap": [
								"SubnetConfig",
								"VPC",
								"CIDR"
							]
						}
					}
				],
				"SecurityGroupEgress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		}
	},
	"Outputs": {
		"StackId": {
			"Value": {
				"Ref": "OpsWorksStack"
			}
		},
		"VPC": {
			"Description": "VPC",
			"Value": {
				"Ref": "VPC"
			}
		},
		"PublicSubnet": {
			"Value": {
				"Ref": "PublicSubnet"
			}
		},
		"PrivateSubnet0": {
			"Value": {
				"Ref": "PrivateSubnet0"
			}
		},
		"PrivateSubnet1": {
			"Value": {
				"Ref": "PrivateSubnet1"
			}
		},
		"PrivateSubnet2": {
			"Value": {
				"Ref": "PrivateSubnet2"
			}
		},
		"PrivateSubnet3": {
			"Value": {
				"Ref": "PrivateSubnet3"
			}
		},
		"DashboardUrl": {
			"Value": {
				"Fn::GetAtt": [
					"DashboardELB",
					"DNSName"
				]
			}
		}
	}
}
